/*
    *   Static connection is being created to consume the data access time
    * */

    private Connection connection;

    public APIservice() {
        try {
             connection = Gateway.getDBConnection();
        } catch (SQLException e) {

        }
    }

    @Override
    public void getAllFlightsByCustomerId(Integer customerId) {

        try {

            //Connection connection = Gateway.getDBConnection();
            Statement statement = this.connection.createStatement();
            String sql = "select customer_first_name, (flight_date), source_, destination_\n" +
                    "from customer_info,flight_info,reservation_info\n" +
                    "where customer_info.customer_id = " + Integer.toString(customerId) + " and\n" +
                    "customer_info.customer_id = reservation_info.customer_id and \n" +
                    "reservation_info.reservation_id = flight_info.reservation_id\n";
            ResultSet rs = statement.executeQuery(sql);
            while (rs.next()) {

                System.out.println(rs.getString("customer_first_name") + " " + rs.getString("flight_date")
                        + " " + rs.getString("source_") + " " + rs.getString("destination_"));

            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void getAllFlights() {
        try {

            //Connection connection = Gateway.getDBConnection();
            Statement statement = this.connection.createStatement();
            String sql = "select airline_name, airline_flight_name, flight_date, source_, destination_\n" +
                    "from airline_info, airline_flight_info, flight_info\n" +
                    "where airline_info.airline_id = airline_flight_info.airline_id and\n" +
                    "airline_flight_info.airline_flight_id = flight_info.airline_flight_id";
            ResultSet rs = statement.executeQuery(sql);
            while (rs.next()) {

                System.out.println(rs.getString("airline_name") + " " + rs.getString("airline_flight_name")
                        + " " + rs.getString("flight_date") + " " + rs.getString("source_") + " " + rs.getString("destination_"));

            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void getAllFlightsByAirline(String airlineName) {

        airlineName = "'" + airlineName + "'";

        try {

            //Connection connection = Gateway.getDBConnection();
            Statement statement = this.connection.createStatement();
            String sql = "select airline_name, airline_flight_name, flight_date, source_, destination_\n" +
                    "from airline_info, airline_flight_info, flight_info\n" +
                    "where airline_info.airline_name = " + airlineName + " and\n" +
                    "airline_info.airline_id = airline_flight_info.airline_id and\n" +
                    "airline_flight_info.airline_flight_id = flight_info.airline_flight_id";
            ResultSet rs = statement.executeQuery(sql);
            while (rs.next()) {

                System.out.println(rs.getString("airline_name") + " " + rs.getString("airline_flight_name")
                        + " " + rs.getString("flight_date") + " " + rs.getString("source_") + " " + rs.getString("destination_"));

            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    @Override
    public Customer getCustomerByLogin(String username, String password) {
        Customer customer = new Customer(101, "First", "Last");
        customer.setFlights(Tester.testFlights());
        return customer;
    }

    @Override
    public void validateAirlineAdminLogin(String username, String password) {
        String sql = "SELECT EXISTS (\n" +
                "  SELECT * FROM airline_admin_login WHERE admin_username = 'america1234' AND admin_password = '12345'\n" +
                ")";
    }